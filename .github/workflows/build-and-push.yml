
name: Deploy upon dispatch
on:
  workflow_dispatch:
  repository_dispatch:
    types: [deploy-event]  # same as 'event_type' from Repo A

env:
  REGISTRY: oneretailhackaton.jfrog.io/virtual-docker
  IMAGE_NAME: oneretailhackaton.jfrog.io/virtual-docker/${{ github.repository }}:${{ github.run_number }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Check out Repo A
        uses: actions/checkout@v4
      - name: Check out Repo Source
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SOURCE_REPO_SECRET }}
          repository: 'kratarget/oneretail-app'
          ref: 'master'
      
      # Use the payload if needed
      - name: Show payload
        run: |
          echo "Event type: ${{ github.event.action }}"
          echo "Ref from Repo A: ${{ github.event.client_payload.ref }}"
          echo "SHA from Repo A: ${{ github.event.client_payload.sha }}"

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}


      - name: Build Tag and push Docker Image
        run: |
          jf docker build -t $IMAGE_NAME .
          jf docker push $IMAGE_NAME
          
      - name: Publish Build info With JFrog CLI
        env:
          # Generated and maintained by GitHub
          JFROG_CLI_BUILD_NAME: jfrog-docker-build-example
          # JFrog organization secret
          JFROG_CLI_BUILD_NUMBER : ${{ github.run_number }}
        run: |
          # Export the build name and build nuber
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish
